
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "qrjoint"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "qrjoint-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('qrjoint')
Loading required package: quantreg
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("chull.center")
> ### * chull.center
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: chull.center
> ### Title: Fast Interior Point Center of Multivariate Data
> ### Aliases: chull.center
> ### Keywords: programming
> 
> ### ** Examples
>  
> p <- 9
> n <- 200
> u <- runif(n)
> require(splines)
Loading required package: splines
> x <- bs(u, df = p)
> chull.center(x, plot = TRUE)
[1] 0.06845323 0.12283850 0.11311845 0.07888416 0.08998464 0.12668647 0.09528448
[8] 0.07701239 0.12107800
attr(,"EPts")
 [1] 104  88 172  63   9 181  21 188 116  86
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("chull.center", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:splines’

> nameEx("coef.qde")
> ### * coef.qde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coef.qde
> ### Title: Coefficient Extraction from qde Model Fit
> ### Aliases: coef.qde
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Plasma data analysis
> data(plasma)
> Y <- plasma$BetaPlasma
> Y <- Y + 0.1 * rnorm(length(Y)) ## remove atomicity
> 
> # model fitting with 50 posterior samples from 100 iterations (thin = 2)
> fit.qde <- qde(Y, 50, 2)
Initial lp = -2199.2
iter = 10, lp = -2146.77 acpt = 0.24 
iter = 20, lp = -2142.27 acpt = 0.20 
iter = 30, lp = -2142.27 acpt = 0.00 
iter = 40, lp = -2074.75 acpt = 0.10 
iter = 50, lp = -2074.75 acpt = 0.00 
iter = 60, lp = -2074.75 acpt = 0.00 
iter = 70, lp = -2074.75 acpt = 0.00 
iter = 80, lp = -2056.54 acpt = 0.20 
iter = 90, lp = -2041.69 acpt = 0.10 
iter = 100, lp = -2041.69 acpt = 0.00 
elapsed time: 0 seconds
> betas <- coef(fit.qde)
> signif(betas$parametric, 3)
      Estimate  Lo95% Up95%
gam0    132.00 121.00 138.0
sigma   164.00 158.00 186.0
nu        9.04   8.22  10.6
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coef.qde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coef.qrjoint")
> ### * coef.qrjoint
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coef.qrjoint
> ### Title: Regression Coefficient Extraction from qrjoint Model Fit
> ### Aliases: coef.qrjoint
> ### Keywords: programming
> 
> ### ** Examples
>  
> ## Plasma data analysis
> 
> # recoding variables
> data(plasma)
> plasma$Sex <- as.factor(plasma$Sex)
> plasma$SmokStat <- as.factor(plasma$SmokStat)
> plasma$VitUse <- 3 - plasma$VitUse
> plasma$VitUse <- as.factor(plasma$VitUse)
> 
> # model fitting with 50 posterior samples from 100 iterations (thin = 2)
> fit.qrj <- qrjoint(BetaPlasma ~ Age + Sex + SmokStat + Quetelet + VitUse + Calories + 
+         Fat + Fiber + Alcohol + Cholesterol + BetaDiet, plasma, nsamp = 40, thin = 2)
Initial lp = -2004.87
iter = 8, lp = -2001.58 acpt = 0.00 0.27 0.03 0.14 0.36 0.29 0.52 0.14 0.17 0.07 0.38 0.16 0.14 0.21 0.00 0.09 0.14 
iter = 16, lp = -1999.55 acpt = 0.02 0.31 0.00 0.18 0.21 0.26 0.28 0.42 0.00 0.15 0.16 0.00 0.14 0.29 0.00 0.00 0.02 
iter = 24, lp = -1996.55 acpt = 0.00 0.16 0.00 0.27 0.51 0.02 0.40 0.02 0.03 0.03 0.07 0.05 0.25 0.42 0.05 0.00 0.00 
iter = 32, lp = -1987.28 acpt = 0.00 0.10 0.09 0.35 0.25 0.13 0.13 0.12 0.00 0.01 0.11 0.15 0.37 0.00 0.00 0.00 0.14 
iter = 40, lp = -1985.42 acpt = 0.00 0.32 0.07 0.03 0.00 0.00 0.00 0.00 0.01 0.03 0.17 0.25 0.52 0.01 0.00 0.13 0.00 
iter = 48, lp = -1971.32 acpt = 0.00 0.21 0.00 0.17 0.25 0.23 0.05 0.18 0.00 0.01 0.45 0.05 0.34 0.13 0.08 0.00 0.00 
iter = 56, lp = -1963.44 acpt = 0.00 0.13 0.19 0.20 0.12 0.19 0.02 0.27 0.00 0.27 0.21 0.18 0.10 0.00 0.13 0.05 0.00 
iter = 64, lp = -1953.2 acpt = 0.00 0.14 0.07 0.18 0.02 0.00 0.05 0.24 0.07 0.30 0.29 0.02 0.31 0.00 0.00 0.00 0.00 
iter = 72, lp = -1947.38 acpt = 0.00 0.09 0.39 0.39 0.01 0.10 0.00 0.21 0.01 0.05 0.08 0.13 0.03 0.13 0.00 0.12 0.00 
iter = 80, lp = -1942.59 acpt = 0.00 0.33 0.32 0.00 0.17 0.05 0.25 0.27 0.03 0.02 0.15 0.14 0.18 0.07 0.00 0.14 0.00 
elapsed time: 2 seconds
> 
> ## Not run: 
> ##D betas <- coef(fit.qrj) ## no plots
> ##D betas <- coef(fit.qrj, plot = TRUE) ## estimates are plotted
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coef.qrjoint", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getBands")
> ### * getBands
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getBands
> ### Title: Posterior Credible Bands
> ### Aliases: getBands
> ### Keywords: programming
> 
> ### ** Examples
>  
> ## toy example
> 
> x <- 2*pi*seq(0,1,.01)
> fsamp <- replicate(100, rnorm(1,0,0.1) + rnorm(1,1,0.2) * cos(x))
> getBands(fsamp)
> getBands(fsamp, x = x, col = 3, remove.edges = FALSE, xlab = "x", ylab = "f", bty = "n")
> getBands(fsamp, x = x, col = "darkgreen", remove.edges = FALSE, xlab = "x", ylab = "f")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getBands", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plasma")
> ### * plasma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plasma
> ### Title: Plasma Concentration of Beta-Carotene and Retinol
> ### Aliases: plasma
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(plasma)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plasma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.qde")
> ### * predict.qde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.qde
> ### Title: Posterior predictive summary for quantile-based density
> ###   estimation
> ### Aliases: predict.qde
> ### Keywords: programming
> 
> ### ** Examples
>  
> # Plasma data analysis
> 
> data(plasma)
> Y <- plasma$BetaPlasma
> Y <- Y + 0.1 * rnorm(length(Y)) ## remove atomicity
> 
> # model fitting with 50 posterior samples from 100 iterations (thin = 2)
> fit.qde <- qde(Y, 50, 2)
Initial lp = -2199.2
iter = 10, lp = -2146.77 acpt = 0.24 
iter = 20, lp = -2142.27 acpt = 0.20 
iter = 30, lp = -2142.27 acpt = 0.00 
iter = 40, lp = -2074.75 acpt = 0.10 
iter = 50, lp = -2074.75 acpt = 0.00 
iter = 60, lp = -2074.75 acpt = 0.00 
iter = 70, lp = -2074.75 acpt = 0.00 
iter = 80, lp = -2056.54 acpt = 0.20 
iter = 90, lp = -2041.69 acpt = 0.10 
iter = 100, lp = -2041.69 acpt = 0.00 
elapsed time: 0 seconds
> pred <- predict(fit.qde)
> hist(Y, freq = FALSE, col = "gray", border = "white", ylim = c(0, max(pred$fest)))
> matplot(pred$y, pred$fest, type="l", col=1, lty=c(2,1,2), ylab="Density", xlab="y")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.qde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.qrjoint")
> ### * predict.qrjoint
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.qrjoint
> ### Title: Posterior predictive summary for quantile estimation
> ### Aliases: predict.qrjoint
> ### Keywords: programming
> 
> ### ** Examples
>  
> ## Plasma data analysis
> 
> # recoding variables
> data(plasma)
> plasma$Sex <- as.factor(plasma$Sex)
> plasma$SmokStat <- as.factor(plasma$SmokStat)
> plasma$VitUse <- 3 - plasma$VitUse
> plasma$VitUse <- as.factor(plasma$VitUse)
> 
> # Model fitting with 40 posterior samples from 80 iterations (thin = 2) is for
> # illustration only. For practical model fitting, increase iterations, 
> # e.g. nsamp = 500, thin = 20
> ## Not run: 
> ##D fit.qrj <- qrjoint(BetaPlasma ~ Age + Sex + SmokStat + Quetelet + VitUse + Calories + 
> ##D         Fat + Fiber + Alcohol + Cholesterol + BetaDiet, plasma, nsamp = 40, thin = 2)
> ##D 
> ##D quants <- predict(fit.qrj)
> ##D matplot(fit.qrj$tau.g[fit.qrj$reg.ix], t(quants), type="l", xlab="p",
> ##D ylab="Quantile Function", col="lightgray", lty=1)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.qrjoint", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("qde")
> ### * qde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: qde
> ### Title: Quantiles based Density Estimation
> ### Aliases: qde update.qde
> ### Keywords: programming
> 
> ### ** Examples
> 
> ## Plasma data analysis
> 
> data(plasma)
> Y <- plasma$BetaPlasma
> 
> # model fitting with 100 posterior samples from 200 iterations (thin = 2)
> # this is of course for illustration, for practical model fitting you
> # ought to try at least something like nsamp = 500, thin = 20
> fit.qde <- qde(Y, nsamp = 100, thin = 2)
Initial lp = -2431.32
iter = 20, lp = -2079.59 acpt = 0.25 
iter = 40, lp = -2034.53 acpt = 0.16 
iter = 60, lp = -2034.53 acpt = 0.00 
iter = 80, lp = -2034.53 acpt = 0.00 
iter = 100, lp = -2036.04 acpt = 0.02 
iter = 120, lp = -2028.27 acpt = 0.05 
iter = 140, lp = -2028.27 acpt = 0.00 
iter = 160, lp = -2005.62 acpt = 0.22 
iter = 180, lp = -2005.09 acpt = 0.05 
iter = 200, lp = -2007.47 acpt = 0.06 
elapsed time: 0 seconds
> summary(fit.qde, more = TRUE)
WAIC.1 = 4018.11 , WAIC.2 = 4018.35 
> pred <- predict(fit.qde)
> hist(Y, freq = FALSE, col = "gray", border = "white", ylim = c(0, max(pred$fest)))
> lines(pred$y, pred$fest[,2])
> lines(pred$y, pred$fest[,1], lty = 2)
> lines(pred$y, pred$fest[,3], lty = 2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("qde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("qrjoint")
> ### * qrjoint
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: qrjoint
> ### Title: Joint Estimation of Linear Quantile Planes
> ### Aliases: qrjoint update.qrjoint
> ### Keywords: programming
> 
> ### ** Examples
>  
> ## Plasma data analysis
> 
> # recoding variables
> data(plasma)
> plasma$Sex <- as.factor(plasma$Sex)
> plasma$SmokStat <- as.factor(plasma$SmokStat)
> plasma$VitUse <- 3 - plasma$VitUse
> plasma$VitUse <- as.factor(plasma$VitUse)
> 
> # Model fitting with 40 posterior samples from 80 iterations (thin = 2) is for
> # illustration only. For practical model fitting, increase iterations, 
> # e.g. nsamp = 500, thin = 20
> fit.qrj <- qrjoint(BetaPlasma ~ Age + Sex + SmokStat + Quetelet + VitUse + Calories + 
+         Fat + Fiber + Alcohol + Cholesterol + BetaDiet, plasma, nsamp = 40, thin = 2)
Initial lp = -2004.87
iter = 8, lp = -2001.58 acpt = 0.00 0.27 0.03 0.14 0.36 0.29 0.52 0.14 0.17 0.07 0.38 0.16 0.14 0.21 0.00 0.09 0.14 
iter = 16, lp = -1999.55 acpt = 0.02 0.31 0.00 0.18 0.21 0.26 0.28 0.42 0.00 0.15 0.16 0.00 0.14 0.29 0.00 0.00 0.02 
iter = 24, lp = -1996.55 acpt = 0.00 0.16 0.00 0.27 0.51 0.02 0.40 0.02 0.03 0.03 0.07 0.05 0.25 0.42 0.05 0.00 0.00 
iter = 32, lp = -1987.28 acpt = 0.00 0.10 0.09 0.35 0.25 0.13 0.13 0.12 0.00 0.01 0.11 0.15 0.37 0.00 0.00 0.00 0.14 
iter = 40, lp = -1985.42 acpt = 0.00 0.32 0.07 0.03 0.00 0.00 0.00 0.00 0.01 0.03 0.17 0.25 0.52 0.01 0.00 0.13 0.00 
iter = 48, lp = -1971.32 acpt = 0.00 0.21 0.00 0.17 0.25 0.23 0.05 0.18 0.00 0.01 0.45 0.05 0.34 0.13 0.08 0.00 0.00 
iter = 56, lp = -1963.44 acpt = 0.00 0.13 0.19 0.20 0.12 0.19 0.02 0.27 0.00 0.27 0.21 0.18 0.10 0.00 0.13 0.05 0.00 
iter = 64, lp = -1953.2 acpt = 0.00 0.14 0.07 0.18 0.02 0.00 0.05 0.24 0.07 0.30 0.29 0.02 0.31 0.00 0.00 0.00 0.00 
iter = 72, lp = -1947.38 acpt = 0.00 0.09 0.39 0.39 0.01 0.10 0.00 0.21 0.01 0.05 0.08 0.13 0.03 0.13 0.00 0.12 0.00 
iter = 80, lp = -1942.59 acpt = 0.00 0.33 0.32 0.00 0.17 0.05 0.25 0.27 0.03 0.02 0.15 0.14 0.18 0.07 0.00 0.14 0.00 
elapsed time: 2 seconds
> summary(fit.qrj, more = TRUE)
WAIC.1 = 3830.8 , WAIC.2 = 3832.26 
> 
> ## Not run: 
> ##D # additional MCMC runs to get 10 more samples (20 additional iterations)
> ##D fit.qrj <- update(fit.qrj, 10)
> ##D summary(fit.qrj, more = TRUE)
> ## End(Not run)
> 
> ## Not run: 
> ##D ### UIS data analysis (with right censoring)
> ##D data(uis)
> ##D uis.qrj <- qrjoint(Y ~ TREAT + NDT + IV3 + BECK + FRAC + 
> ##D                        RACE + AGE + SITE , data=uis, cens = (1 - uis$CENSOR), 
> ##D                      nsamp = 50, thin = 2, fix.nu = 1e5)
> ##D summary(uis.qrj, more = TRUE)
> ##D 
> ##D betas <- coef(uis.qrj, plot = TRUE, col = "darkgreen")
> ##D tau.grid <- uis.qrj$tau.g[uis.qrj$reg.ix]
> ##D L <- length(tau.grid)
> ##D beta.samp <- betas$beta.samp
> ##D 
> ##D # survival curve estimation for k randomly chosen subjects
> ##D n <- nrow(uis)
> ##D k <- 9
> ##D ix.sel <- sort(sample(n, k))
> ##D Qsel.gp <- predict(uis.qrj, newdata=uis[ix.sel,], summarize=FALSE)
> ##D   
> ##D colRGB <- col2rgb("darkgreen")/255
> ##D colTrans <- rgb(colRGB[1], colRGB[2], colRGB[3], alpha = 0.05)
> ##D par(mfrow = c(3,3), mar = c(4,3,2,1) + .1)
> ##D for(i in 1:k){
> ##D   plot(exp(apply(Qsel.gp[i,,],1,mean)), 1 - tau.grid, ty = "n", ann = FALSE, 
> ##D         bty = "n", xlim = exp(c(2, 8)), ylim = c(0,1), lty = 2, log = "x")
> ##D   for(j in 1:dim(beta.samp)[3])
> ##D       lines(exp(Qsel.gp[i,,j]), 1 - tau.grid, col = colTrans, lwd = 1)
> ##D   title(xlab = "Return time (days)", ylab = "Survival function", line = 2)
> ##D   title(main = bquote(Obs.Id == .(ix.sel[i])))
> ##D   grid()  
> ##D }
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("qrjoint", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("redmaple")
> ### * redmaple
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: redmaple
> ### Title: Basal Areas of Red Maple Trees
> ### Aliases: redmaple
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(redmaple)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("redmaple", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.qde")
> ### * summary.qde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.qde
> ### Title: Summary Method for Quantile based Density Estimation
> ### Aliases: summary.qde
> ### Keywords: programming
> 
> ### ** Examples
>  
> # Plasma data analysis
> 
> data(plasma)
> Y <- plasma$BetaPlasma
> Y <- Y + 0.1 * rnorm(length(Y)) ## remove atomicity
> 
> # model fitting with 50 posterior samples from 100 iterations (thin = 2)
> fit.qde <- qde(Y, 50, 2)
Initial lp = -2199.2
iter = 10, lp = -2146.77 acpt = 0.24 
iter = 20, lp = -2142.27 acpt = 0.20 
iter = 30, lp = -2142.27 acpt = 0.00 
iter = 40, lp = -2074.75 acpt = 0.10 
iter = 50, lp = -2074.75 acpt = 0.00 
iter = 60, lp = -2074.75 acpt = 0.00 
iter = 70, lp = -2074.75 acpt = 0.00 
iter = 80, lp = -2056.54 acpt = 0.20 
iter = 90, lp = -2041.69 acpt = 0.10 
iter = 100, lp = -2041.69 acpt = 0.00 
elapsed time: 0 seconds
> summary(fit.qde, more = TRUE)
WAIC.1 = 4112.81 , WAIC.2 = 4117.62 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.qde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.qrjoint")
> ### * summary.qrjoint
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.qrjoint
> ### Title: Summary Method for qrjoint Model Fit
> ### Aliases: summary.qrjoint
> ### Keywords: programming
> 
> ### ** Examples
>  
> # Plasma data analysis
> 
> # recoding variables
> data(plasma)
> plasma$Sex <- as.factor(plasma$Sex)
> plasma$SmokStat <- as.factor(plasma$SmokStat)
> plasma$VitUse <- 3 - plasma$VitUse
> plasma$VitUse <- as.factor(plasma$VitUse)
> 
> # Model fitting with 40 posterior samples from 80 iterations (thin = 2) is for
> # illustration only. For practical model fitting, increase iterations, 
> # e.g. nsamp = 500, thin = 20
> fit.qrj <- qrjoint(BetaPlasma ~ Age + Sex + SmokStat + Quetelet + VitUse + Calories + 
+         Fat + Fiber + Alcohol + Cholesterol + BetaDiet, plasma, nsamp = 40, thin = 2)
Initial lp = -2004.87
iter = 8, lp = -2001.58 acpt = 0.00 0.27 0.03 0.14 0.36 0.29 0.52 0.14 0.17 0.07 0.38 0.16 0.14 0.21 0.00 0.09 0.14 
iter = 16, lp = -1999.55 acpt = 0.02 0.31 0.00 0.18 0.21 0.26 0.28 0.42 0.00 0.15 0.16 0.00 0.14 0.29 0.00 0.00 0.02 
iter = 24, lp = -1996.55 acpt = 0.00 0.16 0.00 0.27 0.51 0.02 0.40 0.02 0.03 0.03 0.07 0.05 0.25 0.42 0.05 0.00 0.00 
iter = 32, lp = -1987.28 acpt = 0.00 0.10 0.09 0.35 0.25 0.13 0.13 0.12 0.00 0.01 0.11 0.15 0.37 0.00 0.00 0.00 0.14 
iter = 40, lp = -1985.42 acpt = 0.00 0.32 0.07 0.03 0.00 0.00 0.00 0.00 0.01 0.03 0.17 0.25 0.52 0.01 0.00 0.13 0.00 
iter = 48, lp = -1971.32 acpt = 0.00 0.21 0.00 0.17 0.25 0.23 0.05 0.18 0.00 0.01 0.45 0.05 0.34 0.13 0.08 0.00 0.00 
iter = 56, lp = -1963.44 acpt = 0.00 0.13 0.19 0.20 0.12 0.19 0.02 0.27 0.00 0.27 0.21 0.18 0.10 0.00 0.13 0.05 0.00 
iter = 64, lp = -1953.2 acpt = 0.00 0.14 0.07 0.18 0.02 0.00 0.05 0.24 0.07 0.30 0.29 0.02 0.31 0.00 0.00 0.00 0.00 
iter = 72, lp = -1947.38 acpt = 0.00 0.09 0.39 0.39 0.01 0.10 0.00 0.21 0.01 0.05 0.08 0.13 0.03 0.13 0.00 0.12 0.00 
iter = 80, lp = -1942.59 acpt = 0.00 0.33 0.32 0.00 0.17 0.05 0.25 0.27 0.03 0.02 0.15 0.14 0.18 0.07 0.00 0.14 0.00 
elapsed time: 2 seconds
> summ <- summary(fit.qrj, more = TRUE)
WAIC.1 = 3830.8 , WAIC.2 = 3832.26 
> 
> ## Not run: 
> ##D # Visually assess uniformity of quantile levels with histogram and qqplot
> ##D # Notes: Can assess across all MCMC draws (as below) or for single iteration;
> ##D # adjustments to quantile levels will be needed for censored observations
> ##D hist(summ$ql, breaks=40, freq=F)
> ##D curve(dunif(x),add=T)
> ##D qqplot(summ$ql, qunif(ppoints(length(summ$ql))),xlab="actual", ylab="theoretical")
> ##D abline(0,1)
> ##D 
> ##D # Visually assess linearity assumption using quantile levels
> ##D # Notes: Can assess across all MCMC draws or for single iteration (as below)
> ##D 
> ##D # Loess gives visual of center of quantile levels across covariate;
> ##D # trend line should be near 0.5
> ##D library(ggplot2)
> ##D use <- sample(1:ncol(summ$ql),1)
> ##D plasma$qlsamp <- summ$ql[,use]
> ##D ggplot(data=plasma, aes(x=Age, y=qlsamp)) + geom_point() + geom_smooth(se=F,
> ##D method="loess")
> ##D 
> ##D # Violin plot allows for assessment of entire distribution across covariate;
> ##D # densities within decile bins should be blocky-uniform 
> ##D cut_dec <- function(x) factor(cut(x, quantile(x,0:10/10),inc=TRUE),labels=1:10)
> ##D ggplot(data=plasma, aes(x=cut_dec(Age), y=qlsamp)) + geom_violin() +
> ##D xlab("Age Decile Bins")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.qrjoint", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("waic")
> ### * waic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: waic
> ### Title: Watanabe Information Criterion
> ### Aliases: waic
> ### Keywords: programming
> 
> ### ** Examples
>  
> # Plasma data analysis
> 
> # recoding variables
> data(plasma)
> plasma$Sex <- as.factor(plasma$Sex)
> plasma$SmokStat <- as.factor(plasma$SmokStat)
> plasma$VitUse <- 3 - plasma$VitUse
> plasma$VitUse <- as.factor(plasma$VitUse)
> 
> # Model fitting with 40 posterior samples from 80 iterations (thin = 2) is for
> # illustration only. For practical model fitting, increase iterations, 
> # e.g. nsamp = 500, thin = 20
> fit.qrj <- qrjoint(BetaPlasma ~ Age + Sex + SmokStat + Quetelet + VitUse + Calories + 
+         Fat + Fiber + Alcohol + Cholesterol + BetaDiet, plasma, nsamp = 40, thin = 2)
Initial lp = -2004.87
iter = 8, lp = -2001.58 acpt = 0.00 0.27 0.03 0.14 0.36 0.29 0.52 0.14 0.17 0.07 0.38 0.16 0.14 0.21 0.00 0.09 0.14 
iter = 16, lp = -1999.55 acpt = 0.02 0.31 0.00 0.18 0.21 0.26 0.28 0.42 0.00 0.15 0.16 0.00 0.14 0.29 0.00 0.00 0.02 
iter = 24, lp = -1996.55 acpt = 0.00 0.16 0.00 0.27 0.51 0.02 0.40 0.02 0.03 0.03 0.07 0.05 0.25 0.42 0.05 0.00 0.00 
iter = 32, lp = -1987.28 acpt = 0.00 0.10 0.09 0.35 0.25 0.13 0.13 0.12 0.00 0.01 0.11 0.15 0.37 0.00 0.00 0.00 0.14 
iter = 40, lp = -1985.42 acpt = 0.00 0.32 0.07 0.03 0.00 0.00 0.00 0.00 0.01 0.03 0.17 0.25 0.52 0.01 0.00 0.13 0.00 
iter = 48, lp = -1971.32 acpt = 0.00 0.21 0.00 0.17 0.25 0.23 0.05 0.18 0.00 0.01 0.45 0.05 0.34 0.13 0.08 0.00 0.00 
iter = 56, lp = -1963.44 acpt = 0.00 0.13 0.19 0.20 0.12 0.19 0.02 0.27 0.00 0.27 0.21 0.18 0.10 0.00 0.13 0.05 0.00 
iter = 64, lp = -1953.2 acpt = 0.00 0.14 0.07 0.18 0.02 0.00 0.05 0.24 0.07 0.30 0.29 0.02 0.31 0.00 0.00 0.00 0.00 
iter = 72, lp = -1947.38 acpt = 0.00 0.09 0.39 0.39 0.01 0.10 0.00 0.21 0.01 0.05 0.08 0.13 0.03 0.13 0.00 0.12 0.00 
iter = 80, lp = -1942.59 acpt = 0.00 0.33 0.32 0.00 0.17 0.05 0.25 0.27 0.03 0.02 0.15 0.14 0.18 0.07 0.00 0.14 0.00 
elapsed time: 2 seconds
> summary(fit.qrj, more = TRUE)
WAIC.1 = 3830.8 , WAIC.2 = 3832.26 
> 
> # the call to summary already shows the waic for the fitted model, it also returns 
> # the observation level log-likelihood vales. To calculate waic from last 20 draws 
> # we can use:
> 
> ## Not run: 
> ##D summary(fit.qrj, more = TRUE)
> ##D ll <- sm$ll
> ##D waic(ll[,21:40])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("waic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  15.555 0.203 15.836 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
